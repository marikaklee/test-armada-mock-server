/**
* MIT License
*
* Copyright (c) 2018-present, Walmart Inc.,
*
* Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*
*/
var Logger = require('testarmada-midway-logger');
var Crypto = require('crypto');
var Ncp = require('ncp').ncp;
var Promise = require('bluebird');
var Fs = require('fs');
var _ = require('lodash');

module.exports = {
  transposeData: function (object, valueToSubstitute) {
    _substitueAllElementsForAstric(object, valueToSubstitute);

    for (var prop in valueToSubstitute) {
      if (valueToSubstitute.hasOwnProperty(prop)) {
        _.set(object, prop, valueToSubstitute[prop]);
      }
    }
    return object;
  },

  readJsonFile: function (fileLocation) {
    var data = this.readFileSynchronously(fileLocation);
    try {
      var jsonData = JSON.parse(data);
      return jsonData;
    } catch (e) {
      Logger.error('Not a json file!', e);
      return null;
    }
  },

  readFileSynchronously: function (fileLocation) {
    var data;
    try {
      data = Fs.readFileSync(fileLocation, 'utf8');
    } catch (e) {
      if (e.code === 'ENOENT') {
        data = 'File not found at: ' + fileLocation;
        Logger.warn(data);
        return data;
      } else {
        throw e;
      }
    }
    return data;
  },

  generateUniqueId: function (prefix) {
    var uniqueId = Crypto.randomBytes(3).toString('hex');
    if (prefix) {
      return prefix + '_' + uniqueId;
    }
    return uniqueId;
  },

  createBackup: function (source, destination, callback) {
    Logger.debug('creating backup.....');
    var ncp = Promise.promisify(Ncp);
    ncp(source, destination).then(function () {
      Logger.debug('backup created on path: ' + destination);
      return callback();
    }).catch(function (err) {
      Logger.error('Error when copying content: ' + err);
      return callback(err);
    });
  }
};

function _substitueAllElementsForAstric(object, valueToSubstitute) {
  var found = false;
  do {
    found = false;
    Logger.debug('Substituting * for all array elements');
    var valuesToInsert = {};
    var valuesToRemove = [];
    for (var prop in valueToSubstitute) {
      if (valueToSubstitute.hasOwnProperty(prop)) {
        var indexOfAstric = prop.indexOf('*');
        // Check if prop contains *
        if (indexOfAstric > -1) {
          Logger.debug('prop with star: ' + prop + ' at index of: ' + indexOfAstric);
          valuesToRemove.push(prop);

          var arrayObjectStringWithAstric = prop.substr(0, indexOfAstric - 1);
          Logger.debug('arrayObjectStringWithAstric: ' + arrayObjectStringWithAstric);

          var restOfString = prop.substr(indexOfAstric + 1);
          Logger.debug('restOfString: ' + restOfString);

          var arrayObjectWithAstric = _.get(object, arrayObjectStringWithAstric, 'default');

          if (arrayObjectWithAstric != 'default') {
            if (_.isArray(arrayObjectWithAstric)) {
              var arrayObjectlength = arrayObjectWithAstric.length;
              Logger.debug('length of array object with * to transpose: ' + arrayObjectlength);

              for (var i = 0; i < arrayObjectlength; i++) {
                var newSubstitueValue = arrayObjectStringWithAstric + '[' + i + restOfString;
                valuesToInsert[newSubstitueValue] = valueToSubstitute[prop];
              }
            } else {
              Logger.error('Transpose Data failure >> Not an array >> ' + arrayObjectStringWithAstric);
            }
          }
        }
      }
    }

    Logger.debug('Before: ' + JSON.stringify(valueToSubstitute, null, 4));

    // Add new values
    for (var item in valuesToInsert) {
      if (valuesToInsert.hasOwnProperty(item)) {
        Logger.debug('Adding: ' + item + ':' + valuesToInsert[item]);
        valueToSubstitute[item] = valuesToInsert[item];
      }
    }

    // Remove old values
    for (var i = 0; i < valuesToRemove.length; i++) {
      found = true;
      Logger.debug('Removing: ' + valuesToRemove[i]);
      delete valueToSubstitute[valuesToRemove[i]];
    }

    Logger.debug('After: ' + JSON.stringify(valueToSubstitute, null, 4));
  } while (found);
}

